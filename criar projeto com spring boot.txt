1 - Spring initialzr: (Inicializa o programa com dependências e tomcat)
-Maven
-Java 17
-Adicionar dependencias:
*Spring web
*Lombok


2 - Conectar o spring ao banco de dados:
no arquivo application.properties colocar os dados:

Para banco Mysql:
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost/nomeDoDatabase
spring.datasource.username=root
spring.datasource.password=root

para banco PostegreSQL:
spring.datasource.url=jdbc:postgresql://localhost:5432/northwind 
spring.datasource.username=postgres
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


3 - Criar a classe do modelo relacional para gerar a tabela no banco de dados:
Criar classe model no package .model.
Indicar que será uma entidade (@Entity)
Indicar o nome da tabela ( @Table(name = "TB_PRODUCTS") )
Implementar a interface Serializable ( implements Serializable )
e criar o long com serial ( private static final long serialVersionUID = 1L;)
Criar o atributo ID como UUID, colocar anotação id e a estratégia de implementação:
@Id
@GeneratedValue(strategy=GenerationType.AUTO)
private UUID id;

Adicionar os outros atributos da tabela relacional.
Criar construtor que recebe o Dto

Obs. se a propriedade spring.jpa.hibernate.ddl-auto estiver como "update", o banco de dados será criado

4 - Criar interface repository:
Extender a classe JpaRepository com a classe modelo que pretende usar e o tipo do id usado nela:
Indicar que é um @Repository

public interface ProductRepository extends JpaRepository<ProductModel, UUID>{

5 - Criar Classe Controller:
Indicar que é um controller com @RestController.
declarar o repositório com injeção de dependência: 
@RestController
public class ProductController {

	@Autowired
	ProductRepository productRepository;


6 - Criar record Dto baseado no Model (com exceção do id, já que ele será autoincrementado)
Adicionar anotações @NotBlank e @NotNull aos atributos

7 - Criar as requisições HTTP:

Get All:
retornar um ResponseEntity com status OK e com uma lista do model no corpo/body

@GetMapping
	public ResponseEntity<List<ProductModel>> exibirTudo() {
		
		return ResponseEntity.status(HttpStatus.OK).body(productRepository.findAll());
	}

GetById:



@GetMapping("/{id}")
	public ResponseEntity<Object> exibirId(@PathVariable(value="id") UUID id){
		Optional<ProductModel> productO = productRepository.findById(id); (Estudar Linha)
		
		return ResponseEntity.status(HttpStatus.OK).body(productO);
		
	}


Post:
Passar o dto nos argumentos 
Usar o @RequestBody que é usado para enviar dados do cliente para o servidor em solicitações HTTP
Usar a anotação @Valid para que o preenchimento dos atributos como NotBlank entre em vigor:
 public void cadastrar(@RequestBody @Valid ProductDto productDto) 
instanciar o model com o Dto.
Usar o metodo save do repository instanciado:
ProductModel a = new ProductModel(productDto);
		productRepository.save(a);




Update/Put:

Delete:
@DeleteMapping("/{id}")
	public ResponseEntity<Object> delete(@PathVariable(value="id") UUID id){
		Optional<ProductModel> productO = productRepository.findById(id);
		
		productRepository.delete(productO.get());
		
		return ResponseEntity.status(HttpStatus.OK).body(productO);
		
	}

8 - Configurar api para o frontend:

